{
  "_args": [
    [
      {
        "raw": "countup.js@^1.8.1",
        "scope": null,
        "escapedName": "countup.js",
        "name": "countup.js",
        "rawSpec": "^1.8.1",
        "spec": ">=1.8.1 <2.0.0",
        "type": "range"
      },
      "/Users/qin/vxVue/node_modules/vux"
    ]
  ],
  "_from": "countup.js@>=1.8.1 <2.0.0",
  "_id": "countup.js@1.8.5",
  "_inCache": true,
  "_location": "/countup.js",
  "_nodeVersion": "0.10.22",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/countup.js-1.8.5.tgz_1493162403810_0.06518958369269967"
  },
  "_npmUser": {
    "name": "inorganik",
    "email": "jamie.perkins@gmail.com"
  },
  "_npmVersion": "3.5.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "countup.js@^1.8.1",
    "scope": null,
    "escapedName": "countup.js",
    "name": "countup.js",
    "rawSpec": "^1.8.1",
    "spec": ">=1.8.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/vux"
  ],
  "_resolved": "https://registry.npmjs.org/countup.js/-/countup.js-1.8.5.tgz",
  "_shasum": "0941f62c605835c601478b45e8c096b16d7e9881",
  "_shrinkwrap": null,
  "_spec": "countup.js@^1.8.1",
  "_where": "/Users/qin/vxVue/node_modules/vux",
  "bugs": {
    "url": "https://github.com/inorganik/countUp.js/issues"
  },
  "dependencies": {},
  "description": "Animates a numerical value by counting to it",
  "devDependencies": {
    "@angular/core": "^2.2.3",
    "@types/core-js": "^0.9.34",
    "del": "~0.1.3",
    "gulp": "~3.8.10",
    "gulp-rename": "~1.2.0",
    "gulp-typescript": "^3.1.3",
    "gulp-uglify": "^1.4.2",
    "gulp-wrap-umd": "~0.2.1",
    "rxjs": "^5.0.1",
    "typescript": "^2.0.10",
    "zone.js": "^0.7.2"
  },
  "directories": {},
  "dist": {
    "shasum": "0941f62c605835c601478b45e8c096b16d7e9881",
    "tarball": "https://registry.npmjs.org/countup.js/-/countup.js-1.8.5.tgz"
  },
  "gitHead": "e42f0b5721b309d1a4a40563148eeca99ec2e2b2",
  "homepage": "https://github.com/inorganik/countUp.js#readme",
  "license": "MIT",
  "main": "./dist/countUp.min.js",
  "maintainers": [
    {
      "name": "inorganik",
      "email": "jamie.perkins@gmail.com"
    }
  ],
  "name": "countup.js",
  "optionalDependencies": {},
  "readme": "# CountUp.js\nCountUp.js is a dependency-free, lightweight JavaScript \"class\" that can be used to quickly create animations that display numerical data in a more interesting way.\n\nDespite its name, CountUp can count in either direction, depending on the `startVal` and `endVal` params that you pass.\n\nCountUp.js supports all browsers.\n\n## [Try the demo](http://inorganik.github.io/countUp.js)\n\n## Installation\n\nSimply include the countUp.js file in your project or install via npm or bower using the package name `countup.js` or `countUp.js` respectively.\n\nBefore making a pull request, please [read this](#contributing). MIT License.\n\n## Angular directive\nIf you are using Angular, you can use the included Angular module. Use the count-up attribute to quickly create an animation. It also integrates nicely with the Angular-scroll-spy directive. The Angular directive only requires an `end-val` attribute, but will also accept `start-val`, `duration`, `decimals`, and `options`. `id` is not needed. You must include both countUp.js and the module to use the Angular directive. **[Check out the angular demo](http://inorganik.github.io/angular-scroll-spy/)** and see usage examples below.\n\n## Angular 2 directive\nAn identical Angular 2 version of the directive compatible with version ^2.0.0 is also provided.\nSimply import the module from `dist/` into your application module's `imports` array. See example below.\n\n## jQuery\nA jQuery version is also included in case you like dollar signs.\n\n## WordPress plugin\nAdd CountUp to your WordPress site with this plugin: [https://wordpress.org/plugins/countup-js/](https://wordpress.org/plugins/countup-js/)\n\n## Usage:\nParams:\n- `target` = id of html element, input, svg text element, or var of previously selected element/input where counting occurs\n- `startVal` = the value you want to begin at\n- `endVal` = the value you want to arrive at\n- `decimals` = (optional) number of decimal places in number, default 0\n- `duration` = (optional) duration in seconds, default 2\n- `options` = (optional, see demo) formatting/easing options object\n\nDecimals, duration, and options can be left out to use the default values.\n\n```js\nvar numAnim = new CountUp(\"SomeElementYouWantToAnimate\", 24.02, 99.99);\nnumAnim.start();\n```\n\nwith optional callback:\n\n```js\nnumAnim.start(someMethodToCallOnComplete);\n\n// or an anonymous function\nnumAnim.start(function() {\n    // do something\n})\n```\n\n#### Other methods:\nToggle pause/resume:\n\n```js\nnumAnim.pauseResume();\n```\n\nReset an animation:\n\n```js\nnumAnim.reset();\n```\n\nUpdate the end value and animate:\n\n```js\nvar someValue = 1337;\nnumAnim.update(someValue);\n```\n\n#### Animating to large numbers\nFor large numbers, since CountUp has a long way to go in just a few seconds, the animation seems to abruptly stop. The solution is to subtract 100 from your `endVal`, then use the callback to invoke the `update` method which completes the animation with the same duration with a difference of only 100 to animate:\n```js\nvar endVal = 9645.72;\nvar numAnim = new CountUp(\"targetElem\", 0, endVal - 100, duration/2);\nnumAnim.start(function() {\n\tnumAnim.update(endVal);\n});\n```\n\n#### Angular\n*If you are using Angular*, (not required), create your animation like the examples below. Make sure you include both countUp.js and angular-countUp.js, and inject the `countUpModule`.\n\n```html\n<h2 count-up end-val=\"873.4\"></h2>\n```\nWith [angular-scroll-spy](http://inorganik.github.io/angular-scroll-spy/):\n```html\n<h2 count-up id=\"numberAnimation\" end-val=\"873.4\" scroll-spy-event=\"elementFirstScrolledIntoView\" scroll-spy></h2>\n```\n\n#### Angular 2\n\nThe directive is compatible with Angular version ^2.0.0. Make sure `countUp.js` is loaded as a global dependency during bootstrapping.\n\nNote the value for the `options` parameter is passed directly to the directive attribute selector.\n\n```ts\nimport {Component, NgModule} from '@angular/core';\n\nimport {CountUpModule} from 'countup.js/dist/countUp.module';\n\n@NgModule({\n   imports: [CountUpModule],\n   bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n// ...\n// ...\n// Use in some component contained within the importing module...\n\n@Component({\n   selector: 'counting-header',\n   template: `\n        <h1 countUp=\"{useEasing: false}\"\n            [startVal]=\"myStartVal\"\n            [endVal]=\"myEndVal\"\n            [reanimateOnClick]=\"false\"></h1>\n   `\n})\nexport class CountingHeaderComponent {\n    @Input()\n    myStartVal: number;\n\n    @Input()\n    myEndVal: number;\n}\n```\n\n#### Custom easing:\n\nYou can optionally apply your custom easing function, which will receive 4 parameters necessary to calculate a Bezier curve:\n\n- `t` (the current time);\n- `b` (the beginning value);\n- `c` (the difference between the beginning and destination value);\n- `d` (the total time of the tween).\n\nYou could use any of Robert Penner's [easing functions](https://github.com/danro/jquery-easing/blob/master/jquery.easing.js). Just avoid using \"bouncy\" functions, because they cause counting in both directions\n\nIf you don't specify a custom easing function, CountUp uses the default `easeOutExpo`.\n\nExample:\n\n```js\nvar easeOutCubic = function(t, b, c, d) {\n    var ts = (t /= d) * t;\n    var tc = ts * t;\n    return b + c * (1.77635683940025e-15 * tc * ts + 0.999999999999998 * tc + -3 * ts + 3 * t);\n};\nvar options = {\n  easingFn: easeOutCubic\n};\nvar demo = new CountUp(\"myTargetElement\", 24.02, 94.62, 2, 2.5, options);\ndemo.start();\n```\n\n## Contributing <a name=\"contributing\"></a>\n\nBefore you make a pull request, please be sure to follow these super simple instructions:\n\n1. Do your work on the `countUp.js` and/or other files in the root directory.\n2. In Terminal, `cd` to the `countUp.js` directory.\n3. Run `npm install`, which installs gulp and its dependencies.\n4. Run `gulp`, which copies and minifies the .js files to the `dist` folder.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/inorganik/countUp.js.git"
  },
  "scripts": {
    "build": "gulp",
    "clean": "gulp clean"
  },
  "version": "1.8.5"
}
